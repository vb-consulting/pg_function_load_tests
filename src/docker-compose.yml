services:
  postgres:
    image: postgres:17-alpine
    command: postgres -c 'max_connections=5000'
    environment:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpass
      POSTGRES_DB: testdb
    ports:
      - "5432:5432"
    volumes:
      - ./_postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - test_network

  django-app-v5.0.9:
    build: 
      context: ./django-app-v5.0.9
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DB_HOST=postgres
      - DB_NAME=testdb
      - DB_USER=testuser
      - DB_PASSWORD=testpass
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  express-app-v4.18.2:
    build:
      context: ./express-app-v4.18.2
      dockerfile: Dockerfile
    ports:
      - "3100:3100"
    environment:
      - DB_HOST=postgres
      - DB_NAME=testdb
      - DB_USER=testuser
      - DB_PASSWORD=testpass
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  postgrest-v12.2.3:
    image: postgrest/postgrest:v12.2.3
    ports:
      - "3000:3000"
    environment:
      PGRST_DB_URI: postgres://testuser:testpass@postgres:5432/testdb
      PGRST_DB_SCHEMA: public
      PGRST_DB_ANON_ROLE: testuser
      PGRST_SERVER_PROXY_URI: "http://postgrest-v12.2.3:3000" 
    volumes:
      - ./postgrest-v12.2.3/postgrest.conf:/etc/postgrest.conf
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  fastapi-app-v0.103.2:
    build: 
      context: ./fastapi-app-v0.103.2
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DB_HOST=postgres
      - DB_NAME=testdb
      - DB_USER=testuser
      - DB_PASSWORD=testpass
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  fastify-app-v4.26.1:
    build:
      context: ./fastify-app-v4.26.1
      dockerfile: Dockerfile
    ports:
      - "3101:3101"
    environment:
      - DB_HOST=postgres
      - DB_NAME=testdb
      - DB_USER=testuser
      - DB_PASSWORD=testpass
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  deno-app-v1.40.2:
    build:
      context: ./deno-app-v1.40.2
      dockerfile: Dockerfile
    ports:
      - "3102:3102"
    environment:
      - DB_HOST=postgres
      - DB_NAME=testdb
      - DB_USER=testuser
      - DB_PASSWORD=testpass
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  swoole-php-app-8.3.13:
    build:
      context: ./swoole-php-app-8.3.13
      dockerfile: Dockerfile
    ports:
      - "3103:3103"
    environment:
      - DB_HOST=postgres
      - DB_NAME=testdb
      - DB_USER=testuser
      - DB_PASSWORD=testpass
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  npgsqlrest-aot-v2.2.1:
    image: vbilopav/npgsqlrest:v2.2.1
    ports:
      - "5000:5000"
    volumes:
      - ./npgsqlrest-aot-v2.2.1/appsettings.json:/app/appsettings.json
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  net8-npgsqlrest-jit-v2.12.1:
    build:
      context: ./net8-npgsqlrest-jit-v2.12.1
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  net8-minapi-ef-jit-v8.0.10:
    build:
      context: ./net8-minapi-ef-jit-v8.0.10
      dockerfile: Dockerfile
    ports:
      - "5002:5002"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  net8-minapi-dapper-jit-v2.1.35:
    build:
      context: ./net8-minapi-dapper-jit-v2.1.35
      dockerfile: Dockerfile
    ports:
      - "5003:5003"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  net8-minapi-norm-jit-v5.4.0:
    build:
      context: ./net8-minapi-norm-jit-v5.4.0
      dockerfile: Dockerfile
    ports:
      - "5004:5004"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  net8-minapi-ado-jit-v8.0.5:
    build:
      context: ./net8-minapi-ado-jit-v8.0.5
      dockerfile: Dockerfile
    ports:
      - "5005:5005"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  go-app-v1.22.9:
    build:
      context: ./go-app-v1.22.9
      dockerfile: Dockerfile
    ports:
      - "5200:5200"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  rust-app-v1.75.0:
    build:
      context: ./rust-app-v1.75.0
      dockerfile: Dockerfile
    ports:
      - "5300:5300"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - RUST_LOG=warn
    networks:
      - test_network

  java21-spring-boot-v3.2.2:
    build:
      context: ./java21-spring-boot-v3.2.2
      dockerfile: Dockerfile
    ports:
      - "5400:5400"
    environment:
      - DB_HOST=postgres
      - DB_NAME=testdb
      - DB_USER=testuser
      - DB_PASSWORD=testpass
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  perl-net-server-prefork-v5.34:
    build: 
      context: ./perl-net-server-prefork-v5.34
      dockerfile: Dockerfile
    ports:
      - "8088:8088"
    environment:
      - DB_HOST=postgres
      - DB_NAME=testdb
      - DB_USER=testuser
      - DB_PASSWORD=testpass
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  npgsqlrest-aot-v2.4.0:
    image: vbilopav/npgsqlrest:v2.4.0
    ports:
      - "5500:5500"
    volumes:
      - ./npgsqlrest-aot-v2.4.0/appsettings.json:/app/appsettings.json
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  net9-npgsqlrest-jit-v2.13.1:
    build:
      context: ./net9-npgsqlrest-jit-v2.13.1
      dockerfile: Dockerfile
    ports:
      - "5501:5501"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  net9-minapi-ef-jit-v9.0.1:
    build:
      context: ./net9-minapi-ef-jit-v9.0.1
      dockerfile: Dockerfile
    ports:
      - "5502:5502"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  net9-minapi-dapper-jit-v2.1.35:
    build:
      context: ./net9-minapi-dapper-jit-v2.1.35
      dockerfile: Dockerfile
    ports:
      - "5503:5503"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  net9-minapi-norm-jit-v5.4.0:
    build:
      context: ./net9-minapi-norm-jit-v5.4.0
      dockerfile: Dockerfile
    ports:
      - "5504:5504"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  net9-minapi-ado-jit-v8.0.5:
    build:
      context: ./net9-minapi-ado-jit-v8.0.5
      dockerfile: Dockerfile
    ports:
      - "5505:5505"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - test_network

  test:
    image: grafana/k6:latest
    volumes:
      - ./_k6/scripts:/scripts
      - ./_k6/results:/results
    depends_on:
      - django-app-v5.0.9
      - express-app-v4.18.2
      - postgrest-v12.2.3
      - fastapi-app-v0.103.2
      - fastify-app-v4.26.1
      - deno-app-v1.40.2
      - swoole-php-app-8.3.13
      - npgsqlrest-aot-v2.2.1
      - net8-npgsqlrest-jit-v2.12.1
      - net8-minapi-ef-jit-v8.0.10
      - net8-minapi-dapper-jit-v2.1.35
      - net8-minapi-norm-jit-v5.4.0
      - net8-minapi-ado-jit-v8.0.5
      - go-app-v1.22.9
      - rust-app-v1.75.0
      - java21-spring-boot-v3.2.2
      - perl-net-server-prefork-v5.34
      - npgsqlrest-aot-v2.4.0
      - net9-npgsqlrest-jit-v2.13.1
      - net9-minapi-ef-jit-v9.0.1
      - net9-minapi-dapper-jit-v2.1.35
      - net9-minapi-norm-jit-v5.4.0
      - net9-minapi-ado-jit-v8.0.5
    entrypoint: ["/bin/sh"]
    command: ["-c", "tail -f /dev/null"]
    networks:
      - test_network

networks:
  test_network:
